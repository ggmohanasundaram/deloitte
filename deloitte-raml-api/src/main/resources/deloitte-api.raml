#%RAML 1.0
title: Deloitte API
version: v3
baseUri: https://deloitte.com/api
securitySchemes:
  oauth_2_0:
    description: |
      Dropbox supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
             Used to send a valid OAuth 2 access token. Do not use
             with the "access_token" query string parameter.
          type: string
      queryParameters:
        access_token:
          description: |
             Used to send a valid OAuth 2 access token. Do not use with
             the "Authorization" header.
          type: string
      responses:
        401:
          description: |
              Bad or expired token. This can happen if the user or Dropbox
              revoked or expired an access token. To fix, re-authenticate
              the user.
        403:
          description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
    settings:
      authorizationUri: https://deloitte.com/api/oauth2/authorize
      accessTokenUri: https://deloitte.com/api/oauth2/token
      authorizationGrants: [ authorization_code, implicit, 'urn:ietf:params:oauth:grant-type:saml2-bearer' ]
mediaType:  application/json
types:
  Address:
    type: object
    properties:
      unit_number:
        required: false
        type: integer
      street_name:
        required: true
        type: string
      suburb:
        required: true
        type: string
      state:
        required: true
        type: string
      postal_code:
        required: true
        type: integer
  Customer:
    type: object
    properties:
      customer_id:
        required: false
        type: integer
      first_name:
        required: true
        type: string
      last_name:
        required: true
        type: string
      address:
        required: true
        type: Address

/customers:
  description: "Customers Details"
  get:
    description: "Returns a list of Customers."
    responses:
      200:
        body:
          application/json:
            type: Customer[]
  /{id}:
      uriParameters:
        id:
          type: integer
      get:
        description: "Return controller details for customer_id."
        responses:
          200:
            body:
              application/json:
                type: Customer
                example: |
                   { "customer_id": 1, "first_name": "FIRST_NAME",
                   "last_name": "LAST_NAME",
                    "address":{"street_name":"AMOS","suburb":"WESTMEAD",
                    "state":"NSW","postal_code":2145}}
          404:
            description: "Customer Details not found"

          500:
            description: "Customer Details not found"
  put:
      description: "update  Customer details"
      body:
        application/json:
          type: Customer
          example: |
            { "customer-id":1,"first_name": "FIRST_NAME",
                               "last_name": "LAST_NAME",
                                "address":{"street_name":"AMOS","suburb":"WESTMEAD",
                              "state":"NSW","postal_code":2145}}
      responses:
        201:
          description: "Customer details has been updated"
          body:
            application/json:
              type: object
              properties:
                status:
                  type: string
        400:
          description: "Can't update Customer details."

        404:
          description: "Customer Not Found"

  post:
        description: "Create a New Customer"
        body:
          application/json:
            type: Customer
            example: |
              { "first_name": "FIRST_NAME",
                                 "last_name": "LAST_NAME",
                                  "address":{"street_name":"AMOS","suburb":"WESTMEAD",
                                  "state":"NSW","postal_code":2145}}
        responses:
          201:
            description: "Customer has been added"
            body:
              application/json:
                properties:
                  customer_id:
                    type: integer
          400:
            description: "Can't add Customer"


